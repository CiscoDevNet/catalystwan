# mypy: disable-error-code="empty-body"
from ipaddress import IPv4Network
from typing import Any, List, Union

from pydantic import Field
from typing_extensions import Annotated

from vmngclient.model.policy.policy_definition import (
    AppListEntry,
    BaseAction,
    CountAction,
    DefinitionSequence,
    DestinationDataIPv6PrefixListEntry,
    DestinationDataPrefixListEntry,
    DestinationIPEntry,
    DestinationPortEntry,
    DestinationRegionEntry,
    DNSAppListEntry,
    DNSEntry,
    DSCPEntry,
    Match,
    PacketLengthEntry,
    PLPEntry,
    PolicyDefinitionBody,
    PolicyDefinitionHeader,
    ProtocolEntry,
    SequenceType,
    SourceDataIPv6PrefixListEntry,
    SourceDataPrefixListEntry,
    SourceIPEntry,
    SourcePortEntry,
    TCPEntry,
    TrafficToEntry,
)

TrafficDataPolicySequenceEntry = Annotated[
    Union[
        PacketLengthEntry,
        PLPEntry,
        ProtocolEntry,
        DSCPEntry,
        SourceIPEntry,
        SourcePortEntry,
        DestinationIPEntry,
        DestinationPortEntry,
        TCPEntry,
        DNSEntry,
        TrafficToEntry,
        SourceDataPrefixListEntry,
        DestinationDataPrefixListEntry,
        SourceDataIPv6PrefixListEntry,
        DestinationDataIPv6PrefixListEntry,
        DestinationRegionEntry,
        DNSAppListEntry,
        AppListEntry,
    ],
    Field(discriminator="field"),
]

TrafficDataPolicySequenceActions = Any  # TODO


class TrafficDataPolicyHeader(PolicyDefinitionHeader):
    type: str = Field(default="data", const=True)


class TrafficDataPolicySequenceMatch(Match):
    entries: List[TrafficDataPolicySequenceEntry] = []


class TrafficDataPolicySequence(DefinitionSequence):
    sequence_type: SequenceType = Field(default=SequenceType.DATA, const=True, alias="sequenceType")
    match: TrafficDataPolicySequenceMatch = TrafficDataPolicySequenceMatch()
    actions: List[TrafficDataPolicySequenceActions] = []

    class Config:
        allow_population_by_field_name = True

    def match_destination_ip(self, networks: List[IPv4Network]) -> None:
        self.insert_match(DestinationIPEntry.from_ipv4_networks(networks))

    def add_count_action(self, counter_name: str) -> None:
        self.insert_action(CountAction(parameter=counter_name))


class TrafficDataPolicy(TrafficDataPolicyHeader, PolicyDefinitionBody):
    sequences: List[TrafficDataPolicySequence] = []

    class Config:
        allow_population_by_field_name = True

    def add_ipv4_sequence(
        self, name: str, base_action: BaseAction = BaseAction.DROP, log: bool = False
    ) -> TrafficDataPolicySequence:
        seq = TrafficDataPolicySequence(  # type: ignore[call-arg]
            sequence_id=0,  # sequence id will be autogenerated in add method
            sequence_name=name,
            base_action=base_action,
            sequence_ip_type="ipv4",
        )
        self.add(seq)
        return seq
